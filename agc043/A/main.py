#!/usr/bin/env python3
import sys
import numpy as np
import itertools

BLACK = 1
WHITE = 0


def solve(H: int, W: int, s: "List[str]"):
    class Node:
        def __init__(self, r, c, color):
            self.key = (r, c)
            self.color = color

        def traverse(self, traverse_color, nodes_visited=set([])):
            if self.color != traverse_color:
                return nodes_visited
            elif G[self.key]['children'] is []:
                return nodes_visited            

            nodes_visited.add(self.key)
            for child in G[self.key]['children']:
                nodes_visited.update(G[child.key]['node'].traverse(
                    traverse_color, nodes_visited))
            return nodes_visited

    mat = np.zeros((H, W))
    for r in range(H):
        for c, color in enumerate(s[r]):
            if color == '.':
                mat[r, c] = WHITE
            elif color == '#':
                mat[r, c] = BLACK


    G = {(r, c): {
        'node': Node(r, c, mat[r, c]),
        'children': []
    } for r, c in itertools.product(range(H), range(W))}

    for r, c in itertools.product(range(H), range(W)):
        if r + 1 < H:
            G[(r, c)]['children'].append(Node(r + 1, c, mat[r + 1, c]))
        if c + 1 < W:
            G[(r, c)]['children'].append(Node(r, c + 1, mat[r, c + 1]))

    def visit(to_visit, flip_count=0):
        if (H-1, W-1) in to_visit:
            return flip_count

        visited = set()

        for (r, c) in to_visit:
            color = flip_count % 2
            nodes = G[(r, c)]['node'].traverse(color)
            visited.update(nodes)


        if visited == set():
            next_to_visit = to_visit
        else:
            next_to_visit = set()
            for node in visited:
                next_to_visit.update(child.key for child in G[node]['children'])
            next_to_visit = next_to_visit.difference(visited)

        flip_count += 1
        return visit(next_to_visit, flip_count)

    n_flips = visit(set([(0, 0)]))
    print(n_flips//2)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    s = [next(tokens) for _ in range(W)]  # type: "List[str]"
    solve(H, W, s)


if __name__ == '__main__':
    main()
