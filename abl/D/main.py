#!/usr/bin/env python3
import sys
import numpy as np

def func(i,j,k,K, A):
    if abs(A[i] - A[j]) <= K:
        return i, j
    elif abs(A[i] - A[k]) <= K:
        return i, k
    elif abs(A[j] - A[k]) <= K:
        return j, k
    else:
        return 0,0
    
def solve(N: int, K: int, A: "List[int]"):
    if N == 1:
        print(0)
        return
    if N ==2:
        if abs(A[0] - A[1]) <= K:
            print(2)
        else:
            print(0)

    i, j , k = 0, 1, 2
    ans = []
    while i <= N - 1:
        n, m = func(i, j, k, K, A)
        # print(i,j,k,n,m)
        if n != m:
            ans.append(A[n])
            i = m
            j = i + 1

        else:
            j += 1 

        if j+1<N:
            k = j + 1
        else:
            k = j 

        if j == k :
            i = i + 1
            j = i + 1
            k = j + 1

        if k >=N :
            break
    if m !=0:
        ans.append(m)
    print(len(ans))

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
