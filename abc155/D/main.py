#!/usr/bin/env python3


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)

import random
from itertools import combinations, product

import operator as op
from functools import reduce

from bisect import bisect_left, bisect_right

def get_k(i, j):
    i, j = min(i,j), max(i,j)
    ans = i*(i+1)/2 + (j-1)*(j-i)
    
    return int(ans)

def binarySearch (arr, l, r, x): 
  
    # Check base case 
    if r >= l: 
  
        mid = int(l + (r - l) // 2)
  
        # If element is present at the middle itself 
        if get_k(arr[mid]) == x: 
            return mid 
          
        # If element is smaller than mid, then it  
        # can only be present in left subarray 
        elif get_k(arr[mid]) > x: 
            return binarySearch(arr, l, mid-1, x) 
  
        # Else the element can only be present  
        # in right subarray 
        else: 
            return binarySearch(arr, mid + 1, r, x) 
  
    else: 
        # Element is not present in the array 
        return -1


def main():
    # Failed to predict input format
    N, K = list(map(int, input().split()))
    A = list(map(int, input().split()))

    A.sort()

    B = [get_k(n,n) for n in range(N)]
    bl = bisect_left(B, K)
    br = bisect_right(B, K)

    for i,j in combinations(range(bl-1, br+1), 2):
        print(A[i]*A[j])
        if get_k(i,j)==K:
            print(A[i]*A[j])
            break



if __name__ == '__main__':
    main()
