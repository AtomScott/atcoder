#!/usr/bin/env python3
import sys

def solve(nA: int, nB: int, M: int, A: "List[int]", B: "List[int]", x: "List[int]", y: "List[int]", c: "List[int]"):

    cheapest = -1 


    for m in range(M):
        price = A[x[m]-1] + B[y[m]-1] - c[m] 
        if cheapest == -1 or cheapest >= price:
            cheapest = price

    if cheapest >= min(A)+min(B):
        cheapest = min(A)+min(B)

    print(cheapest)
    
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(A)]  # type: "List[int]"
    b = [int(next(tokens)) for _ in range(B)]  # type: "List[int]"
    x = [int()] * (M)  # type: "List[int]"
    y = [int()] * (M)  # type: "List[int]"
    c = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(A, B, M, a, b, x, y, c)

if __name__ == '__main__':
    main()
