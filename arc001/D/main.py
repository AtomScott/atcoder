#!/usr/bin/env python3
import sys
from numpy import np
from collections import defaultdict

class Node:
    __init__(self, x, y):
        self.x = x
        self.y = y
        self.visited = False
        self.dist = np.inf

    def vertices(steps=1):

def w(A, B):
    return np.sqrt((A.x - B.x)**2 + (A.y + B.y)**2)
    
def dijkstra(G, s, t):
    S = Node(s, 0) 
    S.visited = True
    S.dist = 0

    nodes = [S]

    for v in S.vertices():
        dist[v] = w(S, v) # euclid distance from s to v

    last = s
    while last != t:
        # select next unknown vertex minimizing dist[v]
        v_next = np.argmin(dist)

        for v in vertices(from=v_next, steps=1):
            dist[v] = min(dist[v], dist[v_next]+w(v_next, v))

        last = v_next
        known[v_next] = True

def solve(N: int, start: int, goal: int, l: "List[int]", r: "List[int]"):
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    start = int(next(tokens))  # type: int
    goal = int(next(tokens))  # type: int
    l = [int()] * (N - 0 + 1)  # type: "List[int]"
    r = [int()] * (N - 0 + 1)  # type: "List[int]"
    for i in range(N - 0 + 1):
        l[i] = int(next(tokens))
        r[i] = int(next(tokens))
    solve(N, start, goal, l, r)

if __name__ == '__main__':
    main()
