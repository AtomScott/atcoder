#!/usr/bin/env python3
import sys
import string
from random import randint

l = [c for c in string.ascii_lowercase]
def f(N: int):
    N -= 1
    if N // 26:
        return f(N//26) + l[N%26]
    else:
        return l[N%26]

def solve1(N):
    print(f(N))

def solve2(N): 
    lb, ub = 0, 0
    for n_digit in range(1, 100):
        lb = ub + 1
        ub = (ub + 1) * 26
        if lb <= N <= ub:
            off = N - lb
            res = []
            while off > 0:
                off, r = divmod(off, 26)
                res.append(r)
            while len(res) < n_digit:
                res.append(0)
            res.reverse()
            res = ''.join([chr(ord('a') + x) for x in res])
            return res

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    while True:
        N = randint(1, 1000000000000001)  # type: int
        a1 = f(N)
        a2 = solve2(N)
        print(a1, a2, N)
        
        if a1 != a2: break

if __name__ == '__main__':
    main()
