#!/usr/bin/env python3
import sys
# A Binary Tree Node 
class Node: 
  
    # Constructor to create a new node 
    def __init__(self, key): 
        self.key = key  
        self.left = None
        self.right = None
  
  
# A utility function to do inorder traversal of BST 
def inorder(root): 
    if root is not None: 
        inorder(root.left) 
        inorder(root.right) 
  
  
# A utility function to insert a new node with given key in BST 
def insert( node, key): 
  
    # If the tree is empty, return a new node 
    if node is None: 
        return Node(key) 
  
    # Otherwise recur down the tree 
    if key < node.key: 
        node.left = insert(node.left, key) 
    else: 
        node.right = insert(node.right, key) 
  
    # return the (unchanged) node pointer 
    return node 
  
def get_min(root):
    if root.left:
        return get_min(root.left)
    else:
        return root.key

def get_max(root):
    if root.right:
        return get_max(root.right)
    else:
        return root.key
# Given a non-empty binary search tree, return the node 
# with minum key value found in that tree. Note that the 
# entire tree does not need to be searched  
def minValueNode( node): 
    current = node 
  
    # loop down to find the leftmost leaf 
    while(current.left is not None): 
        current = current.left  
  
    return current  
  
# Given a binary search tree and a key, this function 
# delete the key and returns the new root 
def deleteNode(root, key): 
  
    # Base Case 
    if root is None: 
        return root  
  
    # If the key to be deleted is smaller than the root's 
    # key then it lies in  left subtree 
    if key < root.key: 
        root.left = deleteNode(root.left, key) 
  
    # If the kye to be delete is greater than the root's key 
    # then it lies in right subtree 
    elif(key > root.key): 
        root.right = deleteNode(root.right, key) 
  
    # If key is same as root's key, then this is the node 
    # to be deleted 
    else: 
          
        # Node with only one child or no child 
        if root.left is None : 
            temp = root.right  
            root = None 
            return temp  
              
        elif root.right is None : 
            temp = root.left  
            root = None
            return temp 
  
        # Node with two children: Get the inorder successor 
        # (smallest in the right subtree) 
        temp = minValueNode(root.right) 
  
        # Copy the inorder successor's content to this node 
        root.key = temp.key 
  
        # Delete the inorder successor 
        root.right = deleteNode(root.right , temp.key) 
  
  
    return root  

def solve(N: int, a: "List[int]"):
    if N == 1:
        print(a[0])
        return

    r = Node(a[0])
    for i in range(1, N):
        r = insert(r, a[i])

    mx = get_max(r)
    mn = get_min(r)

    while mn!=mx:
        if mn == 1:
            break
        r =  deleteNode(r, mx)
        X = mx-mn
        r = insert(r, X)
        mn = get_min(r)
        mx = get_max(r)
    return mn
    # dll = DoublyLinkedList()
    # dll_rev = DoublyLinkedList()
    # for i in range(N):
    #     dll.add(a[i])
    #     dll_rev.add(a[i]*-1)
    
    # mx = dll.pop().data
    # mn = dll_rev.pop().data*-1

    # while mn!=mx:
    #     X = mx - mn
    #     if X < mn:
    #         dll_rev.add(X*-1)
    #         mn = dll_rev.pop().data*-1
    #     else: 
    #         dll.add(X)
    #         mx = dll.pop().data


    # print(X)


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print(solve(N, a))

if __name__ == '__main__':
    main()
