#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

memo = [1]
for i in range(1, 10**6):
    memo.append(memo[i-1]*i%MOD)

# Returns n! % p  
def modFact( n, p) : 
  return memo[n]



def solve(r: "List[int]", c: "List[int]"):
    r1, r2 = r
    c1, c2 = c

    s = 0
    for i in range(r1, r2):
        for j in range(c1, c2):
            s += modFact(i+j, MOD) / ( modFact(i,MOD) * modFact(j, MOD))

    return s


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    r = [int()] * (2)  # type: "List[int]"
    c = [int()] * (2)  # type: "List[int]"
    for i in range(2):
        r[i] = int(next(tokens))
        c[i] = int(next(tokens))
    print(solve(r, c))

if __name__ == '__main__':
    main()
